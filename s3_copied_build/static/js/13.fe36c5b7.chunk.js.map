{"version":3,"sources":["pages/resources/math-games/magic-square-games/getBotMove.js","pages/resources/math-games/magic-square-games/fifteen-game/components/panels/BotPanel.js","pages/resources/math-games/magic-square-games/fifteen-game/pages/PlayVsBot.js"],"names":["getBotMove","difficultyMode","moveList","humanGoesFirst","outcomeMap","winningMoves","ml","length","pickRandomFromArray","availableNumbers","wins","defensiveMoves","urgentDefensiveMoves","mediumProtocol","sorted","winningForBot","drawing","winningForHuman","getValidMoves","forEach","move","newPosition","concat","outcome","get","push","console","error","sortBotMoves","hardProtocol","mls","nextPlayer","complements","sumsOfTwo","xNumbers","map","sum","complementOf","intersect","oNumbers","doubleAttackingMoves","filter","num","moveSet","Math","floor","random","gameOver","BotPanel","props","handleNewGameClick","changeDifficultyMode","letBotGoFirst","winLossDrawRecord","playMode","Container","sx","width","height","display","flexDirection","justifyContent","disableGutters","StatusHeader","WinLossDrawRecord","Box","id","m","mb","thisButtonsMode","marginX","PlayVsBot","useState","setMoveList","setHumanGoesFirst","gameNumber","setGameNumber","setWinLossDrawRecord","setDifficultyMode","handleBotsTurn","botMove","updatedMoveList","setTimeout","handleGameOver","result","status","overflow","bgcolor","color","FifteenGameBoard","handleNumberCardClick","numberCardClicked","humanGoesNext","includes","warn","assert","newDifficulty"],"mappings":"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","file":"static/js/13.fe36c5b7.chunk.js","sourcesContent":["// X always goes first! X and O will be shorthand for the player who goes First and the player who goes second.\n// PlayerOne and PlayerTwo are NOT markers of who goes first or second in any given game!\n// In the 15 game, PlayerOne and PlayerTWo are distinguished by dark-blue and light-blue\nimport { intersect } from \"../_helpers/probability\";\nimport { sumsOfTwo, complementOf, gameOver, xNumbers, oNumbers, nextPlayer, availableNumbers } from \"./magicSquareHelpers\";\n\n\n//////////////////////////////////////////////////////////////     \n//  GET  BOT  MOVE  PROTOCOLS\n////////////////////////////////////////////////////////////// \nexport function getBotMove(difficultyMode, moveList, humanGoesFirst, outcomeMap) {\n  if (difficultyMode === \"easy\") {\n    return easyProtocol(moveList)\n  }\n  else if (difficultyMode === \"medium\") {\n    return mediumProtocol(moveList)\n  }\n  else if (difficultyMode === \"hard\") {\n    return hardProtocol(moveList, humanGoesFirst, outcomeMap)\n  }\n  else {\n    console.error(`getBotMove called with invalid difficulty mode!!!`)\n  }\n}\n// In EASY mode: Bot wins immediately if it can and otherwise selects a random move. \nfunction easyProtocol(ml) {\n    if (winningMoves(ml).length > 0) {\n        // console.log(`BOT FOUND IMMEDIEATELY WINNING MOVES: ${winningMoves(ml)}`)\n        return pickRandomFromArray(winningMoves(ml))\n    }\n    else {\n        return pickRandomFromArray(availableNumbers(ml))\n    }\n}\n// In MEDIUM mode, Bot wins immediately if possible.\n// In MEDIUM mode, Bot blocks any immediate threats but does not look any further ahead. \nfunction mediumProtocol(ml) {\n    let wins = winningMoves(ml)\n    let defensiveMoves = urgentDefensiveMoves(ml)\n    if (wins.length > 0) {\n        // console.log(`BOT FOUND IMMEDIATELY WINNING MOVES: ${wins}`)\n        return pickRandomFromArray(wins)\n    }\n    else if (defensiveMoves.length > 0) {\n        // console.log(`BOT FOUND URGENT DEFENSIVE MOVES: ${defensiveMoves}`)\n        return pickRandomFromArray(defensiveMoves)\n    }\n    else {\n        return pickRandomFromArray(availableNumbers(ml))\n    }\n}\n\n// In HARD mode Bot looks for forcing moves that will allow it to make double attacks on its next move.\n// In HARD mode Bot avoids letting Player make forcing moves that will lead to double attacks.\nfunction hardProtocol(moveList, humanGoesFirst, outcomeMap) {\n  let sorted = sortBotMoves(moveList, humanGoesFirst, outcomeMap)\n  if (sorted.winningForBot.length > 0) {\n    return pickRandomFromArray(sorted.winningForBot)\n  }\n  else if (sorted.drawing.length > 0) {\n    return pickRandomFromArray(sorted.drawing)\n  }\n  else {\n    return pickRandomFromArray(sorted.winningForHuman)    \n  }\n}\n\n/////////////////////////////////////////////////////////////////////////\n// Coach & Bot Logic: Immediately Winning & Urgent Defensive Moves \n/////////////////////////////////////////////////////////////////////////\n// For NEXT Player on NEXT turn\nexport function winningMoves(mls) { \n  if (nextPlayer(mls) === \"xNext\") {\n    let complements = sumsOfTwo(xNumbers(mls)).map(sum => complementOf(sum))\n    return intersect(availableNumbers(mls), complements)\n  }\n  else {\n    let complements = sumsOfTwo(oNumbers(mls)).map(sum => complementOf(sum))\n    return intersect(availableNumbers(mls), complements)\n  }\n}\nexport function urgentDefensiveMoves(mls) {\n  if (nextPlayer(mls) === \"xNext\") {\n    let complements = sumsOfTwo(oNumbers(mls)).map(sum => complementOf(sum))\n    return intersect(availableNumbers(mls), complements)\n  }\n  else {\n    let complements = sumsOfTwo(xNumbers(mls)).map(sum => complementOf(sum))\n    return intersect(availableNumbers(mls), complements)\n  }\n}\nexport function doubleAttackingMoves(mls) {\n  let doubleAttackingMoves = availableNumbers(mls).filter(num => urgentDefensiveMoves(mls.concat(num)).length > 1)\n  return doubleAttackingMoves\n}\nexport function drawingMoves(mls) { // For NEXT Player\n  if (nextPlayer(mls) === \"xNext\") {\n    let complements = sumsOfTwo(xNumbers(mls)).map(sum => complementOf(sum))\n    return intersect(availableNumbers(mls), complements)\n  }\n  else {\n    let complements = sumsOfTwo(oNumbers(mls)).map(sum => complementOf(sum))\n    return intersect(availableNumbers(mls), complements)\n  }\n}\n\nexport function sortBotMoves(ml, humanGoesFirst, outcomeMap) {\n  let winningForBot = []\n  let drawing = []\n  let winningForHuman = []\n\n  let validMoves = getValidMoves(ml)\n  validMoves.forEach(move => {\n    let newPosition = ml.concat(move)\n    let outcome = outcomeMap.get(newPosition)\n    if (outcome === \"draw\") {\n      drawing.push(move)\n    }\n    else if (outcome === \"xWins\") {\n      if (humanGoesFirst) {\n        winningForHuman.push(move)\n      }\n      else {\n        winningForBot.push(move)\n      }\n    }\n    else if (outcome === \"oWins\") {\n      if (humanGoesFirst) {\n        winningForBot.push(move)\n      }\n      else {\n        winningForHuman.push(move)  \n      }\n    }\n    else {\n      console.error(`Error in sortBotMoves`)\n    }\n  })\n  return {\n    \"winningForBot\": winningForBot,\n    \"drawing\": drawing,\n    \"winningForHuman\": winningForHuman,\n  }\n}\n\n// Randomly selects a move from a list of possible next moves.\nfunction pickRandomFromArray(moveSet) {\n  return moveSet[Math.floor(Math.random() * moveSet.length)]\n}\n\n////////////////////////////////////////////////////////////////\n// Get Children and Helpers:  An Array of move list Strings\n////////////////////////////////////////////////////////////////\nexport function getChildren(mls) {\n    let children = []\n    getValidMoves(mls).forEach(move => children.push(mls + move))\n    // this.validMoves(mls).forEach(move => children.push(mls + move))\n    return children\n}\nfunction getValidMoves(mls) {\n    return (gameOver(mls)) ? [] : availableNumbers(mls)\n}\n\nexport function getParent(ml) {\n    return ml.slice(0, ml.length - 1)\n}\n\n////////////////////////////////////////////////////////////////\n// Opening Book\n////////////////////////////////////////////////////////////////\n// function getOpeningBookMove(ml) {\n//     console.assert(ml.length < 2)\n//     console.log(`BOT MAKING AN OPENING BOOK MOVE.`)\n\n//     if (ml.length === 0) {\n//         return pickRandomFromArray(availableNumbers(ml))\n//     }\n//     else if (ml[0] === 5) {\n//         return pickRandomFromArray([2, 4, 6, 8])\n//     }\n//     else if (ml[0] % 2 === 0) {  // If player took a corner, bot must take center.\n//         return [5]\n//     }\n//     else {\n//         return pickRandomFromArray(blockingMoves(ml))\n//     }\n// }","import React from 'react';\nimport { Box, Container } from '@mui/material';\n\nimport StatusHeader from \"./StatusHeader\"\nimport { HomeButton, BotGoFirstButton, NewGameButton, DifficultyModeButton } from \"../buttons\";\nimport WinLossDrawRecord from \"./WinLossDrawRecord\";\n\nexport default function BotPanel(props) {\n  const { \n    moveList, \n    humanGoesFirst, \n    handleNewGameClick, \n    difficultyMode, \n    changeDifficultyMode, \n    letBotGoFirst,\n    winLossDrawRecord,\n  } = props\n\n  const playMode = \"play-vs-bot\" \n\n  return (\n    <Container \n      sx={{ \n        width: '100%',\n        height: '40vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n      }}\n      disableGutters\n    >\n      <StatusHeader \n        moveList={moveList} \n        playMode={playMode}\n        humanGoesFirst={humanGoesFirst}\n      />\n      <WinLossDrawRecord \n        winLossDrawRecord={winLossDrawRecord}\n        humanGoesFirst={humanGoesFirst}\n        playMode={playMode}\n      />\n        \n      <Box id='button-container' m={1} >\n        <Box display='flex' justifyContent='space-between' height={40} mb={1}  > \n          <DifficultyModeButton thisButtonsMode='easy'   difficultyMode={difficultyMode} changeDifficultyMode={changeDifficultyMode} />\n          <DifficultyModeButton thisButtonsMode='medium' difficultyMode={difficultyMode} changeDifficultyMode={changeDifficultyMode} marginX={1} />\n          <DifficultyModeButton thisButtonsMode='hard'   difficultyMode={difficultyMode} changeDifficultyMode={changeDifficultyMode}  />\n        </Box> \n        <Box display='flex' justifyContent='space-between' height={40} >\n          <HomeButton />\n          <BotGoFirstButton moveList={moveList} letBotGoFirst={letBotGoFirst} />\n          <NewGameButton moveList={moveList} handleNewGameClick={handleNewGameClick} />\n        </Box>\n      </Box>\n    </Container>\n  )\n}\n\n\n","import React, { useState } from 'react';\nimport { Box } from '@mui/material';\n\n// My Components\nimport FifteenGameBoard from \"../components/FifteenGameBoard\";\nimport BotPanel from \"../components/panels/BotPanel\";\n\n// Game Logic\nimport { status, gameOver, nextPlayer  } from \"../../magicSquareHelpers\";\nimport { getBotMove } from \"../../getBotMove\";\n\nexport default function PlayVsBot(props) {\n  const { outcomeMap } = props\n  \n  const startingPosition = \"\" \n  const [moveList, setMoveList] = useState(startingPosition)\n  \n  const [humanGoesFirst, setHumanGoesFirst] = useState(true);\n  const [gameNumber, setGameNumber] = useState(1);\n  const [winLossDrawRecord, setWinLossDrawRecord] = useState([0, 0, 0]);\n  const [difficultyMode, setDifficultyMode] = useState(\"easy\") \n\n  function humanGoesNext(moveList) {  \n    if (humanGoesFirst) {\n      return (nextPlayer(moveList) === \"xNext\")\n    } \n    else {\n      return (nextPlayer(moveList) === \"oNext\")\n    }\n  }\n\n  // CLICK HANDLERS\n  function handleNumberCardClick(numberCardClicked) {\n    if (!humanGoesNext(moveList)) {\n      console.warn(\"NO EFFECT. Be patient, the bot takes a second to move. \")\n      return 1\n    }\n    else if (moveList.includes(numberCardClicked)) {\n      console.warn(\"NO EFFECT. That number has already been claimed.\")\n      return 1\n    }\n    else if (gameOver(moveList)) {\n      console.warn(\"NO EFFECT. The Game is already over.\")\n      return 1\n    }\n    else {\n      let updatedMoveList = moveList.concat(numberCardClicked)\n      setMoveList(updatedMoveList)\n      if (gameOver(updatedMoveList)) {\n        handleGameOver(updatedMoveList)\n      } else {\n        handleBotsTurn(updatedMoveList)\n      }\n      return 0\n    }\n  }\n\n  function handleNewGameClick() {\n    setGameNumber(gameNumber => ++gameNumber)\n    setHumanGoesFirst(true)\n    setMoveList(startingPosition)\n  }\n\n  function letBotGoFirst() {\n    console.assert(moveList.length === 0, `handleLetBotGoFirstClick was called but it is not the frst move of the game!`)\n    setHumanGoesFirst(false)\n    handleBotsTurn('') // if the bot is going first the movelist is empty.\n  }\n\n  function changeDifficultyMode(newDifficulty) {\n    if (newDifficulty !== difficultyMode) {\n      setGameNumber(1)\n      setHumanGoesFirst(true)\n      setWinLossDrawRecord([0, 0, 0])\n      setMoveList(startingPosition)\n      setDifficultyMode(newDifficulty)\n    }\n  }\n\n  // Find and make a move for the Bot with a slight delay. \n  function handleBotsTurn(moveList) {\n    let botMove = getBotMove(difficultyMode, moveList, humanGoesFirst, outcomeMap)\n    let updatedMoveList = moveList.concat(botMove)\n    setTimeout(() => {\n      setMoveList(updatedMoveList)\n      if (gameOver(updatedMoveList)) {\n        handleGameOver(updatedMoveList)\n      }\n    }, 600)\n  }\n\n  function handleGameOver(ml) {\n    let result = status(ml)\n    if (result === \"draw\") {\n      setWinLossDrawRecord([winLossDrawRecord[0], winLossDrawRecord[1], ++winLossDrawRecord[2]])\n    }\n    else if (result === \"xWins\") {\n      if (humanGoesFirst) {\n        setWinLossDrawRecord([++winLossDrawRecord[0], winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n      else {\n        setWinLossDrawRecord([winLossDrawRecord[0], ++winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n    }\n    else if (result === \"oWins\") {\n      if (humanGoesFirst) {\n        setWinLossDrawRecord([winLossDrawRecord[0], ++winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n      else {\n        setWinLossDrawRecord([++winLossDrawRecord[0], winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n    }\n    else {\n        console.error(`handleGameOver called with invalid game result: ${result}. `)\n    }\n  }\n\n  return (\n    <Box \n      width='100%' \n      height='calc(100vh - 96px)'\n      overflow='hidden'\n      bgcolor='common.black'\n      color='common.white'\n    >\n      <FifteenGameBoard \n        moveList={moveList}\n        handleNumberCardClick={handleNumberCardClick}\n      />\n\n      <BotPanel\n        moveList={moveList}\n        gameNumber={gameNumber}\n        winLossDrawRecord={winLossDrawRecord}\n        humanGoesFirst={humanGoesFirst}\n        handleNewGameClick={handleNewGameClick}\n        letBotGoFirst={letBotGoFirst}\n        difficultyMode={difficultyMode}\n        changeDifficultyMode={changeDifficultyMode}\n      />\n\n    </Box>\n  )\n}\n"],"sourceRoot":""}