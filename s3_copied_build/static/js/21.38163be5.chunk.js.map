{"version":3,"sources":["pages/resources/math-games/magic-square-games/tic-tac-toe/components/buttons/DifficultyModeButton.js","pages/resources/math-games/magic-square-games/tic-tac-toe/components/panels/BotPanel.js","pages/resources/math-games/magic-square-games/tic-tac-toe/pages/PlayVsBot.js"],"names":["DifficultyModeButton","props","thisButtonsMode","difficultyMode","changeDifficultyMode","selected","Button","children","sx","flexGrow","mx","border","variant","onClick","BotPanel","moveList","humanGoesFirst","newGame","letBotGoFirst","winLossDrawRecord","gameNumber","DifficultyModeButtons","Box","mb","height","display","justifyContent","NewGameButton","color","disabled","gameOver","mr","alignContent","icon","faRotateLeft","size","BotGoFirstButton","length","StatusHeader","gameStatus","status","message","Typography","pt","align","component","noWrap","gutterBottom","WinLossDrawRecord","playerOne","playerTwo","flexDirection","px","Container","width","disableGutters","HomeButton","PlayVsBot","outcomeMap","useState","setMoveList","setHumanGoesFirst","setGameNumber","setWinLossDrawRecord","setDifficultyMode","handleBotsTurn","botMove","getBotMove","updatedMoveList","concat","setTimeout","handleGameOver","ml","result","console","error","overflow","bgcolor","Board","showSolution","handleSquareClick","squareClicked","nextPlayer","humanGoesNext","includes","warn","assert","newDifficulty"],"mappings":"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","file":"static/js/21.38163be5.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@mui/material';\n\nexport default function DifficultyModeButton(props) {\n  const { thisButtonsMode, difficultyMode, changeDifficultyMode } = props\n  const selected = (thisButtonsMode === difficultyMode)\n  return (\n    <Button\n      children={thisButtonsMode}\n      sx={{flexGrow: 1, mx: 1, border: selected ? 'solid white 3px' : 'none' }}\n      variant={'contained'}\n      onClick={() => changeDifficultyMode(thisButtonsMode)}\n    />\n  )\n}\n  ","import React from 'react';\n\nimport { Box, Container, Button, Typography } from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRotateLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport HomeButton from \"../buttons/HomeButton\";\nimport DifficultyModeButton from \"../buttons/DifficultyModeButton\";\n\n// Logic\n// import {  } from \"../../../solution\";\nimport { status, gameOver } from \"../../../magicSquareHelpers\";\n\n\nexport default function BotPanel(props) {\n  const { \n    moveList, \n    humanGoesFirst, \n    newGame, \n    difficultyMode, \n    changeDifficultyMode, \n    letBotGoFirst,\n    winLossDrawRecord,\n    gameNumber \n  } = props\n\n  const DifficultyModeButtons = () => {\n    return (\n      <Box mb={2} height={40} display='flex' justifyContent='space-between' > \n        <DifficultyModeButton thisButtonsMode='easy'   difficultyMode={difficultyMode} changeDifficultyMode={changeDifficultyMode} />\n        <DifficultyModeButton thisButtonsMode='medium' difficultyMode={difficultyMode} changeDifficultyMode={changeDifficultyMode}  />\n        <DifficultyModeButton thisButtonsMode='hard'   difficultyMode={difficultyMode} changeDifficultyMode={changeDifficultyMode}  />\n      </Box> \n    )\n  }\n  \n  const NewGameButton = () => {\n    return (\n      <Button\n        onClick={() => newGame()}\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={!gameOver(moveList)}\n        sx={{ flexGrow: 2, mx: 1 }}\n      >\n        <Box mr={2} display=\"flex\" alignContent=\"center\" >\n          <FontAwesomeIcon icon={faRotateLeft} size='lg' />\n        </Box>\n        Play&nbsp;Again!\n      </Button>\n    )\n  }\n  const BotGoFirstButton = () => {\n    return (\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => letBotGoFirst()}\n        disabled={moveList.length !== 0}\n        sx={{ flexGrow: 2, mx: 1 }}\n      >\n        Let&nbsp;Bot&nbsp;Go&nbsp;First\n      </Button>\n    )\n  }\n\n  const StatusHeader = () => {\n    const gameStatus = status(moveList);\n    let message = `Game Number ${gameNumber}`\n    switch (gameStatus) {\n      case \"xWins\":\n        message = (humanGoesFirst) ? \"Game Over. Human Wins!\" : \"Game Over. Bot Wins!\"\n        break\n      case \"oWins\":\n        message = (humanGoesFirst) ? \"Game Over. Bot Wins!\" : \"Game Over. Human Wins!\" \n        break\n      case \"draw\":\n        message = \"Game Over! Draw.\"\n        break\n      case \"xNext\":\n        message = (humanGoesFirst) ? \"Human's Turn\" : \"Bot's Turn\" \n        break\n      case \"oNext\":\n        message = (humanGoesFirst) ? \"Bot's Turn\" : \"Human's Turn\" \n        break\n      default:\n    }\n    return (\n    <Typography \n      children={message} \n      pt={2} \n      color=\"common.white\" \n      align='center' \n      component='h1' \n      variant='h4' noWrap gutterBottom />\n    )\n  }\n\n  const WinLossDrawRecord = () => {\n    // const {  } = props\n    let playerOne = \"\"\n    let playerTwo = \"\"\n    if (humanGoesFirst) {\n      playerOne = \"X Human\"\n      playerTwo = \"O Bot\"\n    }\n    else {\n      playerOne = \"O Human\"\n      playerTwo = \"X Bot\"\n    }\n\n    return (\n      <Box display='flex' flexDirection='column' px='25%' >\n        <Box display='flex' justifyContent='space-between' >\n          <Typography align='left' variant='h5' >\n            {playerOne}:\n          </Typography>\n          <Typography align='right' variant='h5' >\n            {winLossDrawRecord[0]}\n          </Typography>\n        </Box> \n        <Box display='flex' justifyContent='space-between' >\n          <Typography align='left' variant='h5' >\n            {playerTwo}:\n          </Typography>\n          <Typography align='right' variant='h5' >\n            {winLossDrawRecord[1]}\n          </Typography>\n        </Box> \n        <Box display='flex' justifyContent='space-between' >\n          <Typography align='left' variant='h5' >\n            Drawn:\n          </Typography>\n          <Typography align='right' variant='h5' >\n            {winLossDrawRecord[2]}\n          </Typography>\n        </Box> \n      </Box>  \n    )\n  }\n\n  return (\n    <Container \n      sx={{ \n        width: '100%',\n        height: '35vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n      }}\n      disableGutters\n    >\n      <StatusHeader />\n      <WinLossDrawRecord />\n        \n      <Box>\n        <DifficultyModeButtons /> \n        <Box display='flex' justifyContent='space-between' height={40} >\n          <BotGoFirstButton />\n          <NewGameButton />\n          <HomeButton />\n        </Box>\n      </Box>\n    </Container>\n  )\n}\n\n\n","import React, { useState } from 'react'\nimport { Box } from '@mui/material'\n\n\n// My Componets\nimport Board from \"../components/Board\"\nimport BotPanel from \"../components/panels/BotPanel\"\n\n// Game Logic\nimport { status, gameOver, nextPlayer  } from \"../../magicSquareHelpers\";\nimport { getBotMove } from \"../../getBotMove\";\n\nexport default function PlayVsBot(props) {\n  const { outcomeMap } = props\n  // const [outcomeMap] = useOutletContext();\n  \n  const startingPosition = \"\" \n  const [moveList, setMoveList] = useState(startingPosition)\n  \n  const [humanGoesFirst, setHumanGoesFirst] = useState(true);\n  const [gameNumber, setGameNumber] = useState(1);\n  const [winLossDrawRecord, setWinLossDrawRecord] = useState([0, 0, 0]);\n  const [difficultyMode, setDifficultyMode] = useState(\"hard\") \n\n  function humanGoesNext(moveList) {  \n    if (humanGoesFirst) {\n      return (nextPlayer(moveList) === \"xNext\")\n    } \n    else {\n      return (nextPlayer(moveList) === \"oNext\")\n    }\n  }\n\n  // CLICK HANDLERS\n  function handleSquareClick(squareClicked) {\n    if (!humanGoesNext(moveList)) {\n      console.warn(\"NO EFFECT. Be patient, the bot takes a second to move. \")\n      return 1\n    }\n    else if (moveList.includes(squareClicked)) {\n      console.warn(\"NO EFFECT. That number has already been claimed.\")\n      return 1\n    }\n    else if (gameOver(moveList)) {\n      console.warn(\"NO EFFECT. The Game is already over.\")\n      return 1\n    }\n    else {\n      let updatedMoveList = moveList.concat(squareClicked)\n      setMoveList(updatedMoveList)\n      if (gameOver(updatedMoveList)) {\n        handleGameOver(updatedMoveList)\n      } else {\n        handleBotsTurn(updatedMoveList)\n      }\n      return 0\n    }\n  }\n\n  function newGame() {\n    setGameNumber(gameNumber => ++gameNumber)\n    setHumanGoesFirst(true)\n    setMoveList(startingPosition)\n  }\n\n  function letBotGoFirst() {\n    console.assert(moveList.length === 0, `handleLetBotGoFirstClick was called but it is not the frst move of the game!`)\n    setHumanGoesFirst(false)\n    handleBotsTurn('') // if the bot is going first the movelist is empty.\n  }\n\n  function changeDifficultyMode(newDifficulty) {\n    if (newDifficulty !== difficultyMode) {\n      setGameNumber(1)\n      setHumanGoesFirst(true)\n      setWinLossDrawRecord([0, 0, 0])\n      setMoveList(startingPosition)\n      setDifficultyMode(newDifficulty)\n    }\n  }\n\n  // Find and make a move for the Bot with a slight delay. \n  function handleBotsTurn(moveList) {\n    let botMove = getBotMove(difficultyMode, moveList, humanGoesFirst, outcomeMap)\n    let updatedMoveList = moveList.concat(botMove)\n    setTimeout(() => {\n      setMoveList(updatedMoveList)\n      if (gameOver(updatedMoveList)) {\n        handleGameOver(updatedMoveList)\n      }\n    }, 600)\n  }\n\n  function handleGameOver(ml) {\n    let result = status(ml)\n    if (result === \"draw\") {\n      setWinLossDrawRecord([winLossDrawRecord[0], winLossDrawRecord[1], ++winLossDrawRecord[2]])\n    }\n    else if (result === \"xWins\") {\n      if (humanGoesFirst) {\n        setWinLossDrawRecord([++winLossDrawRecord[0], winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n      else {\n        setWinLossDrawRecord([winLossDrawRecord[0], ++winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n    }\n    else if (result === \"oWins\") {\n      if (humanGoesFirst) {\n        setWinLossDrawRecord([winLossDrawRecord[0], ++winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n      else {\n        setWinLossDrawRecord([++winLossDrawRecord[0], winLossDrawRecord[1], winLossDrawRecord[2]])\n      }\n    }\n    else {\n        console.error(`handleGameOver called with invalid game result: ${result}. `)\n    }\n  }\n\n  return (\n    <Box \n      width='100%' \n      height='calc(100vh - 96px)'\n      overflow='hidden'\n      bgcolor='common.black'\n      color='common.white'\n    >\n      <Board \n        moveList={moveList}\n        showSolution={false}\n        handleSquareClick={handleSquareClick}\n        outcomeMap={outcomeMap}\n      />\n\n      <BotPanel\n        moveList={moveList}\n        winLossDrawRecord={winLossDrawRecord}\n        humanGoesFirst={humanGoesFirst}\n        newGame={newGame}\n        letBotGoFirst={letBotGoFirst}\n        difficultyMode={difficultyMode}\n        changeDifficultyMode={changeDifficultyMode}\n        gameNumber={gameNumber}\n      />\n\n    </Box>\n  )\n}\n"],"sourceRoot":""}