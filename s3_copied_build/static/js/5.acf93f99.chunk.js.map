{"version":3,"sources":["pages/resources/math-games/magic-square-games/magicSquareHelpers.js","pages/resources/math-games/_helpers/probability.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","pages/resources/math-games/magic-square-games/solution.js","pages/resources/math-games/magic-square-games/fifteen-game/FifteenGameRoutes.js"],"names":["trioList","i","j","k","complementOf","newTrio","push","generateTrioList","sumOfTwo","status","ml","xHasWon","oHasWon","length","nextPlayer","gameOver","gameHasBeenWon","sumsOfThree","xNumbers","includes","oNumbers","numbersInWin","Xs","Os","filter","trio","intersect","flat","outcome","outcomeMap","finalOutcome","childrensOutcomes","getChildren","map","child","get","predictedOutcome","moveListStringToArray","move","turn","Array","from","e","Number","children","availableNumbers","getValidMoves","forEach","Set","delete","parseInt","charAt","getParent","slice","moveSet","sums","sum","sumsOfTwo","listOne","listTwo","item","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","listOfPossiblePositions","positionsList","parentLength","childPositions","parent","getListOfPossiblePositions","generatePositionToOutcomeMap","a","Map","list","positions","p","set","Welcome","lazy","PlayVsFriend","PlayVsBot","FifteenGameRoutes","props","useState","setOutcomeMap","useEffect","generateOutcomeMapAsync","console","log","width","height","overflow","bgcolor","color","maxWidth","disableGutters","index","element","path"],"mappings":"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","file":"static/js/5.acf93f99.chunk.js","sourcesContent":["import { intersect } from \"../_helpers/probability\";\n\n\nexport const trioList = generateTrioList()\nfunction generateTrioList() {\n  let trioList = []\n  for (let i = 1; i <= 7; i++) {\n    for (let j = i + 1; j <= 8; j++) {\n      let k = complementOf(i + j)\n      if (k > j && k <= 9) {\n        let newTrio = [i, j, k]\n        trioList.push(newTrio)\n      }\n    }\n  }\n  return trioList\n}\n\nexport function complementOf(sumOfTwo) {\n    return (15 - sumOfTwo)\n}\n\n////////////////////////////////////////////////////////////////\n//  Current Game Status: \"xWins\", \"oWins\", \"draw\",  \"xNext\", or \"oNext\"\n////////////////////////////////////////////////////////////////\nexport function status(ml) {\n  if (xHasWon(ml)) {\n    return (\"xWins\")\n  }\n  else if (oHasWon(ml)) {\n    return (\"oWins\")\n  }\n  else if (ml.length === 9) {\n    return (\"draw\")\n  }\n  else {\n    return nextPlayer(ml)  // \"xNext\" || \"oNext\"\n  }\n}\n////////////////////////////////////////////////////////////////\n// Game Status Helpers: BOOLEAN\n////////////////////////////////////////////////////////////////\nexport function nextPlayer(ml) {\n  return (ml.length % 2 === 0) ? \"xNext\" : \"oNext\"\n}\nexport function gameOverUsingStatus(status) {\n  return (status === \"xWins\" || status === \"oWins\" || status === \"draw\")\n}\nexport function gameOver(ml) {\n  return (ml.length === 9 || gameHasBeenWon(ml)) ? true : false\n}\nfunction gameHasBeenWon(ml) {\n  return (xHasWon(ml) || oHasWon(ml)) ? true : false\n}\nexport function xHasWon(ml) {\n  return sumsOfThree(xNumbers(ml)).includes(15)\n}\nexport function oHasWon(ml) {\n  return sumsOfThree(oNumbers(ml)).includes(15)\n}\nexport function gameDrawn(ml) {\n  return (ml.length === 9 && !gameHasBeenWon(ml))\n}\nexport function moveNumber(ml) {\n    return (ml.length + 1)\n}\n\nexport function numbersInWin(ml) {\n  let Xs = xNumbers(ml)\n  let Os = oNumbers(ml)\n  let winningTrios = trioList.filter(trio =>\n    intersect(trio, Xs).length === 3 || intersect(trio, Os).length === 3\n  )\n  return winningTrios.flat()\n}\n\n\n////////////////////////////////////////////////////////////////\n//  Predicted and Final Game Outcomes: \"xWins\", \"oWins\", \"draw\"\n////////////////////////////////////////////////////////////////\nexport function outcome(ml, outcomeMap) {\n    return (gameOver(ml)) ? finalOutcome(ml) : predictedOutcome(ml, outcomeMap)\n}\nfunction finalOutcome(ml) {\n    let outcome = \"error\"\n    if (xHasWon(ml)) {\n        outcome = \"xWins\"\n    }\n    else if (oHasWon(ml)) {\n        outcome = \"oWins\"\n    }\n    else if (ml.length === 9) {\n        outcome = \"draw\"\n    }\n    return outcome\n}\nfunction predictedOutcome(ml, outcomeMap) {\n    let outcome = \"error\"\n    let childrensOutcomes = getChildren(ml).map(child => outcomeMap.get(child))\n    // console.log(`Position: ${position} --> childrensOutcomes: ${childrensOutcomes}`)\n    if (nextPlayer(ml) === \"xNext\") {\n        if (childrensOutcomes.includes(\"xWins\")) {\n            outcome = \"xWins\"\n        }\n        else if (childrensOutcomes.includes(\"draw\")) {\n            outcome = \"draw\"\n        }\n        else {\n            outcome = \"oWins\"\n        }\n    }\n    else {\n        if (childrensOutcomes.includes(\"oWins\")) {\n            outcome = \"oWins\"\n        }\n        else if (childrensOutcomes.includes(\"draw\")) {\n            outcome = \"draw\"\n        }\n        else {\n            outcome = \"xWins\"\n        }\n    }\n    return outcome\n}\n\n////////////////////////////////////////////////////////////////\n// Isolate each players' claimed numbers: ARRAY(NUM)\n////////////////////////////////////////////////////////////////\nexport function xNumbers(ml) {\n  return moveListStringToArray(ml).filter((move, turn) => turn % 2 === 0)\n}\nexport function oNumbers(ml) {\n  return moveListStringToArray(ml).filter((move, turn) => turn % 2 === 1)\n}\n\nexport function moveListStringToArray(ml) {               // \"123\" --> [1,2,3]\n  return Array.from(ml).map(e => Number(e))\n}\n\nexport function getChildren(ml) {\n  let children = []\n  getValidMoves(ml).forEach(move => children.push(ml + move))\n  return children\n}\n\nexport function getValidMoves(ml) {\n  return (gameOver(ml)) ? [] : availableNumbers(ml)\n}\n\nexport function availableNumbers(ml) {\n  let availableNumbers = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  for (let i = 0; i < ml.length; i++) {\n    availableNumbers.delete(parseInt(ml.charAt(i)))\n  }\n  return Array.from(availableNumbers)\n}\nexport function getParent(ml) {\n    return ml.slice(0, ml.length - 1)\n}\n\n////////////////////////////////////////////////////////////////\n// Lowest Level Logic\n////////////////////////////////////////////////////////////////\n\nfunction sumsOfThree(moveSet) {\n  let sums = []\n  if (moveSet.length < 3) {\n      return sums\n  }\n  for (let i = 0; i < moveSet.length - 2; i++) {\n      for (let j = i + 1; j < moveSet.length - 1; j++) {\n          for (let k = j + 1; k < moveSet.length; k++) {\n              let sum = moveSet[i] + moveSet[j] + moveSet[k]\n              sums.push(sum)\n          }\n      }\n  }\n  return sums\n}\nexport function sumsOfTwo(moveSet) {\n    let sums = []\n    if (moveSet.length < 2) {\n        return sums\n    }\n    for (let i = 0; i < moveSet.length - 1; i++) {\n        for (let j = i + 1; j < moveSet.length; j++) {\n            let sum = moveSet[i] + moveSet[j]\n            sums.push(sum)\n        }\n    }\n    return sums\n}","\nexport function intersect(listOne, listTwo) {\n  return listOne.filter(item => listTwo.includes(item))\n}\n\n\n// function factorial(num) {\n//     console.assert(num >= 0 && num <=9, `Factorial called with a number out of this game's range!`)\n//     let product = 1\n//     for (let i = 1; i <= num; i++) {\n//         product = product * i\n//     }\n//     return product\n//     // This led to a fun research rabbit hole about how to more efficiently compute factorials using Paschals Triangle\n// }\n\n\n// For most heavily used generic math functions like intersect, union, factorial, mean, randomInt, randomFromArray, choose, ppermutations, combinations.","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { getChildren, outcome } from \"./magicSquareHelpers\";\n\n\nconst listOfPossiblePositions = getListOfPossiblePositions()\nfunction getListOfPossiblePositions() {\n  // Returns an array of arrays of strings\n  // Layer 1) indices 0 thru 9 correspond to the lengths of the move lists contained there\n  // Layer 2) an array containing all valid move lists of that length\n  // Layer 3) Move List string representations\n  let positionsList = [[\"\"]]\n  for (let parentLength = 0; parentLength < 9; parentLength++) {\n      let parentPositions = positionsList[parentLength]\n      let childPositions = parentPositions.map(parent => getChildren(parent)).flat()\n      positionsList.push(childPositions)\n  }\n  return positionsList\n}\n\n\n// export const outcomeMap = generatePositionToOutcomeMap()\nexport async function generatePositionToOutcomeMap() {\n  let outcomeMap = new Map()\n  let list = listOfPossiblePositions\n  for (let length = 9; length >= 0; length--) {\n    let positions = list[length]\n    for (let p = 0; p < positions.length; p++) {\n      let ml = positions[p]\n      outcomeMap.set(ml, outcome(ml, outcomeMap))\n    }\n  }\n  return outcomeMap\n}\n\n\n\n\n","import React, { lazy, useState, useEffect } from 'react'\nimport { Routes, Route } from 'react-router-dom';\nimport { Container, Box } from '@mui/material';\n\nimport { generatePositionToOutcomeMap } from \"../solution\";\n\n\nconst Welcome = lazy(() => import('./pages/Welcome'))\nconst PlayVsFriend = lazy(() => import('./pages/PlayVsFriend')) \nconst PlayVsBot = lazy(() => import('./pages/PlayVsBot')) \n\n// Game Logic\n\nexport default function FifteenGameRoutes(props) {\n  const [outcomeMap, setOutcomeMap] = useState(null)\n  \n  useEffect(() => {\n    const generateOutcomeMapAsync = async () => {\n      const map = await generatePositionToOutcomeMap()\n      setOutcomeMap(map)\n      console.log(\"Outcome Map Generated\");\n    }\n    generateOutcomeMapAsync()\n  }, [])\n\n  return (\n    <Box \n      width='100vw' \n      height='calc(100vh - 48px)'\n      overflow='scroll'\n      bgcolor='common.black'\n      color='common.white'\n    >\n      <Container maxWidth='sm' disableGutters >\n        <Routes >\n          <Route index element={<Welcome />} />\n          <Route path=\"play-vs-friend\" element={<PlayVsFriend outcomeMap={outcomeMap} />} />\n          <Route path=\"play-vs-bot\" element={<PlayVsBot outcomeMap={outcomeMap} />} />\n        </Routes>\n      </Container>\n    </Box>\n  )\n}\n\n"],"sourceRoot":""}