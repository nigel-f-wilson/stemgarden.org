{"version":3,"sources":["../node_modules/@mui/icons-material/ExpandLess.js","../node_modules/@mui/icons-material/ExpandMore.js","../node_modules/@mui/icons-material/Settings.js","pages/resources/divisibilty-playground/DivisibilityPlaygroundPage.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","DivisibilityPlaygroundPage","useContext","AppContext","screenWidth","setNavbarHidden","colorTheme","useEffect","cardFontSize","cardSideLength","gridSpacing","darkMode","backgroundColor","cardColors","red","orange","yellow","green","blue","purple","none","all","text","useState","settingsDrawerOpen","setSettingsDrawerOpen","numberOfColumns","setNumberOfColumns","numberCardSize","setNumberCardSize","factors","setFactors","maxNumberOfColumns","Math","floor","optionsForSquareSize","optionsForNumberOfColumns","optionsForFactors","i","push","textColor","HeaderBar","anchor","open","onClose","PaperProps","sx","padding","Settings","NumberGrid","props","position","zIndex","maxWidth","disableGutters","display","justifyContent","alignItems","height","variant","color","marginX","title","onClick","htmlColor","fontSize","nums","Array","fill","container","spacing","columns","width","margin","map","item","index","xs","NumberCard","num","colors","filter","cardBgColor","length","includes","mix","cardTextColor","children","p","id","flexFlow","pr","onChange","event","target","border","MenuProps","option","px","ColorSettingsRow","py","toUpperCase","newValue","newFactors","handleFactorChange","marginY"],"mappings":"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","file":"static/js/7.2127b3fa.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\"\n}), 'ExpandLess');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}), 'ExpandMore');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\n}), 'Settings');\n\nexports.default = _default;","import React, { useState, useContext, useEffect } from 'react'\nimport { Box, \n  Container, \n  Grid, \n  Stack, \n  Typography, \n  IconButton, \n  Drawer,\n  FormControl, \n  Tooltip, \n  Select, \n  MenuItem, \n  AppBar, \n  Card } from '@mui/material';\n  import SettingsIcon from '@mui/icons-material/Settings';\n  import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n  import ExpandLessIcon from '@mui/icons-material/ExpandLess';\n\nimport { Background } from \"../../../components/backgrounds\";\nimport { Logo } from \"../../../components/navigation\";\n\nimport { AppContext } from \"../../../AppContext\";\n\n// const color_mixing_venn_diagram = \"https://res.cloudinary.com/nola-stem-garden/image/upload/v1655057278/stemgarden.org/project_screenshots/Color-Wheel-Mix-Colors_ejldn0.jpg\"\n\nexport default function DivisibilityPlaygroundPage() {\n  const { screenWidth, setNavbarHidden, colorTheme } = useContext(AppContext)\n\n  useEffect(() => {\n    setNavbarHidden(true)\n  }, [setNavbarHidden])\n\n  const darkMode = colorTheme === 'dark' \n  const backgroundColor = darkMode ? 'darkGrey' : 'white'\n\n  const cardColors = darkMode ?\n  {\n    red: '#DD0000',\n    orange: '#FF6600',\n    yellow: '#FFDD00',\n    green: '#008800',\n    blue: '#002277',\n    purple: '#7711AA',\n    none: 'white',\n    all: 'black',\n    text: 'white'\n  } : {\n\n  }\n\n  const [settingsDrawerOpen, setSettingsDrawerOpen] = useState(true)\n  const [numberOfColumns, setNumberOfColumns] = useState(10)\n  const [numberCardSize, setNumberCardSize] = useState('medium')\n\n  const [factors, setFactors] = useState({\n    red: 'none',\n    yellow: 9,\n    blue: 11\n  })\n\n  let cardFontSize, cardSideLength, gridSpacing\n  if (numberCardSize === 'small') {\n    cardFontSize = 16\n    cardSideLength = 40\n    gridSpacing = 4\n  }\n  else if (numberCardSize === 'medium') {\n    cardFontSize = 24\n    cardSideLength = 60\n    gridSpacing = 6\n  }\n  else {\n    cardFontSize = 36\n    cardSideLength = 90\n    gridSpacing = 8\n  }\n  let maxNumberOfColumns = Math.floor(screenWidth / (cardSideLength + gridSpacing))\n  \n  let optionsForSquareSize = ['small', 'medium', 'large']\n  let optionsForNumberOfColumns = []\n  let optionsForFactors = ['none', 2]\n  for (let i = 3; i < maxNumberOfColumns; i++) {\n    optionsForNumberOfColumns.push(i)\n    optionsForFactors.push(i)\n  }\n\n  let textColor = darkMode ? 'white' : 'black'\n\n  return (\n    <Background>\n      <HeaderBar />\n      <Drawer\n        anchor='top'\n        open={settingsDrawerOpen}\n        onClose={() => {setSettingsDrawerOpen(false)}}\n        PaperProps={{ sx: {backgroundColor: backgroundColor, padding: '7rem 0 2rem'}}}\n      >\n        <Settings />\n      </Drawer>\n      <NumberGrid \n        cardFontSize={cardFontSize}\n        cardSideLength={cardSideLength}\n        gridSpacing={gridSpacing}\n      />\n    </Background>\n  )\n\n  function HeaderBar(props) {\n    return (\n      <AppBar position='sticky' sx={{ zIndex: 1400 }} >\n        <Container maxWidth='lg' disableGutters sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\n          <Logo height=\"4rem\" />\n          <Typography variant='h4' color='white' marginX=\"10%\" >\n            Divisibility Playground\n          </Typography>\n          <Tooltip title={settingsDrawerOpen ? \"Close Settings\" : \"Open Settings\"} >\n            <IconButton \n              variant='contained'\n              onClick={() => {setSettingsDrawerOpen(!settingsDrawerOpen)}}\n            >\n              {settingsDrawerOpen ? <ExpandLessIcon htmlColor='white' fontSize=\"large\" /> : <ExpandMoreIcon htmlColor='white' fontSize=\"large\" /> }\n              <SettingsIcon htmlColor='white' fontSize=\"large\" />\n            </IconButton>\n          </Tooltip>\n        </Container>\n      </AppBar>\n    )\n  }\n\n  function NumberGrid(props) {\n    const { cardFontSize, cardSideLength, gridSpacing } = props\n\n\n    const nums = new Array(360).fill(null)\n    \n    // let cardFontSize, cardSideLength, gridSpacing\n    // if (numberCardSize === 'small') {\n    //   cardFontSize = 16\n    //   cardSideLength = 40\n    //   gridSpacing = 4\n    // }\n    // else if (numberCardSize === 'medium') {\n    //   cardFontSize = 24\n    //   cardSideLength = 60\n    //   gridSpacing = 6\n    // }\n    // else {\n    //   cardFontSize = 36\n    //   cardSideLength = 90\n    //   gridSpacing = 8\n    // }\n    return (\n      <Grid container \n        spacing={`${gridSpacing}px`} \n        columns={numberOfColumns} \n        // maxWidth={`${numberOfColumns * 100}px`}\n        width={`${numberOfColumns * (cardSideLength + gridSpacing)}px`}\n        margin='16px auto'\n      >\n        {nums.map((item, index) => {\n            return (\n              <Grid item xs={1}  key={index}  >\n                <NumberCard num={index + 1} fontSize={cardFontSize} cardSideLength={cardSideLength}  />\n              </Grid>\n            )\n          })} \n      </Grid>\n    )\n  }\n\n  function NumberCard(props) {\n    const { num, fontSize, cardSideLength } = props\n    const colors = ['red', 'yellow', 'blue'].filter(color => num % factors[color] === 0)\n    const cardBgColor = cardColors[mix(colors)]\n    const cardTextColor = (cardBgColor === 'black') ? 'white' : 'black' \n    \n    return (\n      <Card \n        key={num}\n        sx={{ \n          height: `${cardSideLength}px`, \n          width: `${cardSideLength}px`, \n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: cardBgColor,\n        }} \n\n      >\n        <Typography \n          children={num} \n          color={cardTextColor}\n          fontSize={fontSize}\n        />\n      </Card>\n    )\n  }\n\n  // Takes an array subset of primary colors and returns secondary color names\n  function mix(colors) {\n    if (colors.length === 0){\n      return 'none'\n    }\n    else if (colors.length === 1){\n      return colors[0]\n    }\n    else if (colors.length === 2){\n      return (!colors.includes(\"blue\")) ? \"orange\" : (!colors.includes(\"red\")) ? \"green\" : \"purple\"\n    }\n    else {\n      return 'all'\n    }\n  }\n\n  function Settings(props){\n    return (\n      <Box display='flex' justifyContent='center' >\n        <Stack p={1} > \n          <Box id='row-one' display='flex' flexFlow='row wrap' alignItems='center'  >\n            <Typography  variant='h5' color={textColor} pr={1}>Make a grid with </Typography>\n            <FormControl color={textColor} >\n              <Select\n                value={numberOfColumns}\n                onChange={(event) => { setNumberOfColumns(event.target.value) }}\n                sx={{ color: textColor, height: '3.0rem', border: \"solid white 1px\" }}\n                MenuProps={{ sx: { zIndex: 2400}}}\n              >\n                {\n                  optionsForNumberOfColumns.map(option => {\n                    return (\n                      <MenuItem key={option} value={option} >\n                        <Typography variant='h5' children={option}  /> \n                      </MenuItem>\n                    )\n                  })\n                }\n              </Select>\n            </FormControl>\n            <Typography  variant='h5' color={textColor} px={1}>columns of </Typography>\n            <FormControl color={textColor}  >\n              <Select\n                id=\"select-number-of-columns\"\n                value={numberCardSize}\n                onChange={(event) => { setNumberCardSize(event.target.value) }}\n                sx={{ color: textColor, height: '3.0rem', border: \"solid white 1px\" }}\n                MenuProps={{ sx: { zIndex: 2400}}}\n              >\n                {\n                  optionsForSquareSize.map(option => {\n                    return (\n                      <MenuItem key={option} value={option}  >\n                        <Typography variant='h5' children={option}  /> \n                      </MenuItem>\n                    )\n                  })\n                }\n              </Select>\n            </FormControl>\n            <Typography variant='h5' color={textColor} px={1} >sized number cards.</Typography>\n          </Box>\n          \n          <ColorSettingsRow color=\"red\" />\n          <ColorSettingsRow color=\"yellow\" />\n          <ColorSettingsRow color=\"blue\" />\n          <Typography  variant='h5' color={textColor} py={1} pr={1} >See what happens when the colors mix!</Typography>\n          {/* <Box \n            width=\"194px\"\n            paddingTop='194px'\n            backgroundPosition='center center'\n            backgroundRepeat='no-repeat'\n            backgroundSize='contain'\n            sx={{ backgroundImage: `url(${color_mixing_venn_diagram})`}}\n          /> */}\n        </Stack>\n      </Box>\n      \n    )\n  }\n\n  \n\n  function ColorSettingsRow(props) {\n    const { color } = props\n    return (\n      <Box id='row-two' display='flex' alignItems='center'  >\n        <Typography  variant='h5' color={textColor} pr={1}>Color the cards</Typography>\n        <Typography  variant='h4' color={cardColors[color]} pr={1} children={color.toUpperCase()} />\n        <Typography  variant='h5' color={textColor} pr={1}>that are multiples of</Typography>\n        <FormControl >\n          <Select\n            value={factors[color]}\n            onChange={(event) => handleFactorChange(color, event.target.value)}\n            sx={{ color: textColor, height: '2.8rem', marginY: '0.2rem', border: \"solid white 1px\" }}\n            MenuProps={{ sx: { zIndex: 2400}}}\n          >\n            {\n              optionsForFactors.map(option => {\n                return (\n                  <MenuItem key={option} value={option} >\n                    <Typography variant='h5' children={option}  /> \n                  </MenuItem>\n                )\n              })\n            }\n          </Select>\n        </FormControl>\n      </Box>\n    )\n  }\n  function handleFactorChange(color, newValue) {\n    let newFactors = {...factors}\n    newFactors[color] = newValue\n    setFactors(newFactors)\n  }\n}\n"],"sourceRoot":""}